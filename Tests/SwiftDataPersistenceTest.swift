import SwiftData
import SwiftUI

// –ü—Ä–æ—Å—Ç–∞—è —Ç–µ—Å—Ç–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
struct SwiftDataPersistenceTest {
    static let shared = SwiftDataPersistenceTest()

    let modelContainer: ModelContainer

    init() {
        print("üß™ Testing basic SwiftData setup...")

        do {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ç–µ—Å—Ç–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            let (schema, config) = SwiftDataConfigurationManager.createTestConfiguration()
            modelContainer = try ModelContainer(for: schema, configurations: [config])
            print("‚úÖ Unified test configuration successful")
            print("üìã Test schema entities: \(SwiftDataSchemas.entityNames(for: schema))")

        } catch {
            print("‚ùå Unified test configuration failed: \(error)")
            // Fallback –∫ —Å–∞–º–æ–π –ø—Ä–æ—Å—Ç–æ–π —Å—Ö–µ–º–µ
            let emptySchema = Schema([SwiftDataFilm.self])
            let emptyConfig = ModelConfiguration(schema: emptySchema, isStoredInMemoryOnly: true)
            do {
                modelContainer = try ModelContainer(for: emptySchema, configurations: [emptyConfig])
                print("‚ö†Ô∏è Using fallback test schema")
            } catch {
                fatalError("Failed to create even basic test container: \(error)")
            }
        }
    }
}