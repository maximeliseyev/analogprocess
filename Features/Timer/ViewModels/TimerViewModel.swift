//
//  TimerViewModel.swift
//  Film Lab
//
//  Created by Maxim Eliseyev on 12.07.2025.
//

import SwiftUI
import UIKit

@MainActor
class TimerViewModel: ObservableObject {
    @Published var timeRemaining: Int = 0
    @Published var isRunning = false
    @Published var showingAlert = false
    @Published var showAgitationSelection = true
    @Published var selectedAgitationMode: AgitationMode?
    @Published var showManualTimeInput = false
    @Published var showFixingTimer = false
    @Published var isTimerFinished = false
    @Published var fixingMinutes: Int = 5
    @Published var fixingSeconds: Int = 0
    
    @Published var currentMinute: Int = 1
    @Published var shouldAgitate = false
    @Published var agitationTimeRemaining = 0
    @Published var isInAgitationPhase = false
    @Published var currentAgitationPhase: AgitationPhase.PhaseAgitationType?
    
    private var timer: Timer?
    private var totalMinutes: Int
    private var totalSeconds: Int
    
    var totalTime: Int {
        totalMinutes * 60 + totalSeconds
    }
    
    var currentTotalMinutes: Int {
        get { totalMinutes }
        set { totalMinutes = newValue }
    }
    
    var currentTotalSeconds: Int {
        get { totalSeconds }
        set { totalSeconds = newValue }
    }
    
    var progress: Double {
        guard totalTime > 0 else { return 0 }
        return Double(totalTime - timeRemaining) / Double(totalTime)
    }
    
    var displayMinutes: Int {
        timeRemaining / 60
    }
    
    var displaySeconds: Int {
        timeRemaining % 60
    }
    
    init(totalMinutes: Int, totalSeconds: Int) {
        self.totalMinutes = totalMinutes
        self.totalSeconds = totalSeconds
        self.timeRemaining = totalTime
    }
    
    // MARK: - Public Methods
    
    func setupTimer(totalMinutes: Int, totalSeconds: Int) {
        // –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–π–º–µ—Ä–∞, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        // –í —Ç–µ–∫—É—â–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ TimerViewModel —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
    }
    
    func startPauseTimer() {
        if isRunning {
            pauseTimer()
        } else {
            startTimer()
        }
    }
    
    func resetTimer() {
        stopTimer()
        timeRemaining = totalTime
        currentMinute = 1
        setupAgitation()
    }
    
    func stopTimer() {
        isRunning = false
        timer?.invalidate()
        timer = nil
    }
    
    func selectAgitationMode(_ mode: AgitationMode) {
        selectedAgitationMode = mode
        showAgitationSelection = false
        setupAgitation()
    }
    
    // MARK: - Private Methods
    
    private func startTimer() {
        guard timeRemaining > 0 else { return }
        
        isRunning = true
        timer = Timer.scheduledTimer(withTimeInterval: 1, repeats: true) { [weak self] _ in
            DispatchQueue.main.async {
                guard let self = self else { return }
                self.timeRemaining -= 1
                if self.timeRemaining > 0 {
                    self.updateCurrentMinute()
                    self.updateAgitation()
                } else {
                    self.timerFinished()
                }
            }
        }
    }
    
    private func pauseTimer() {
        isRunning = false
        timer?.invalidate()
        timer = nil
    }
    
    func presentManualTimeInput() {
        showManualTimeInput = true
    }
    
    func updateTimerTime(minutes: Int, seconds: Int) {
        stopTimer()
        totalMinutes = minutes
        totalSeconds = minutes * 60 + seconds
        timeRemaining = totalTime
        currentMinute = 1
        setupAgitation()
        showManualTimeInput = false
    }
    
    func getPhaseDescription(_ phase: AgitationPhase.PhaseAgitationType) -> String {
        switch phase {
        case .continuous:
            return "–ù–µ–ø—Ä–µ—Ä—ã–≤–Ω–∞—è –∞–∂–∏—Ç–∞—Ü–∏—è"
        case .still:
            return "–ë–µ–∑ –∞–∂–∏—Ç–∞—Ü–∏–∏"
        case .cycle(let agitation, let rest):
            return "\(agitation)—Å –∞–∂–∏—Ç–∞—Ü–∏–∏ / \(rest)—Å –ø–æ–∫–æ—è"
        case .periodic(let interval):
            return "–ö–∞–∂–¥—ã–µ \(interval)—Å"
        case .custom(let description):
            return description
        }
    }
    
    // MARK: - Private Methods
    
    private func updateCurrentMinute() {
        let elapsedMinutes = (totalTime - timeRemaining) / 60
        currentMinute = elapsedMinutes + 1
    }
    
    private func setupAgitation() {
        guard let mode = selectedAgitationMode else {
            shouldAgitate = false
            return
        }
        
        shouldAgitate = true
        currentAgitationPhase = mode.getAgitationForMinuteWithTotal(currentMinute, totalMinutes: totalMinutes)?.agitationType
        
        if let phase = currentAgitationPhase {
            switch phase {
            case .continuous:
                isInAgitationPhase = true
                agitationTimeRemaining = 0
            case .still:
                isInAgitationPhase = false
                agitationTimeRemaining = 0
            case .cycle(let agitation, _):
                isInAgitationPhase = true
                agitationTimeRemaining = agitation
            case .periodic(let interval):
                isInAgitationPhase = true
                agitationTimeRemaining = interval
            case .custom:
                isInAgitationPhase = false
                agitationTimeRemaining = 0
            }
        }
    }
    
    private func updateAgitation() {
        guard shouldAgitate, let mode = selectedAgitationMode else { return }
        
        let newPhase = mode.getAgitationForMinuteWithTotal(currentMinute, totalMinutes: totalMinutes)?.agitationType
        if newPhase != currentAgitationPhase {
            currentAgitationPhase = newPhase
            setupAgitation()
        }
        
        guard let phase = currentAgitationPhase else { return }
        
        switch phase {
        case .continuous:
            break
            
        case .still:
            break
            
        case .cycle(let agitation, let rest):
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –≤ —ç—Ç–æ–π —Å–µ–∫—É–Ω–¥–µ
            if agitationTimeRemaining == 1 {
                // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º
                let oldPhase = isInAgitationPhase ? "Agitation" : "Rest"
                if isInAgitationPhase {
                    isInAgitationPhase = false
                    agitationTimeRemaining = rest
                } else {
                    isInAgitationPhase = true
                    agitationTimeRemaining = agitation
                }
                let newPhase = isInAgitationPhase ? "Agitation" : "Rest"
                
                print("üîÑ [\(Date())] –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞: \(oldPhase) ‚Üí \(newPhase) (–≤—Ä–µ–º—è: \(agitationTimeRemaining)s)")
                
                let impactFeedback = UIImpactFeedbackGenerator(style: .light)
                impactFeedback.impactOccurred()
            } else {
                // –ü—Ä–æ—Å—Ç–æ —É–º–µ–Ω—å—à–∞–µ–º —Å—á–µ—Ç—á–∏–∫
                agitationTimeRemaining -= 1
            }
            
        case .periodic(let interval):
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –≤ —ç—Ç–æ–π —Å–µ–∫—É–Ω–¥–µ
            if agitationTimeRemaining == 1 {
                agitationTimeRemaining = interval
                
                let impactFeedback = UIImpactFeedbackGenerator(style: .light)
                impactFeedback.impactOccurred()
            } else {
                agitationTimeRemaining -= 1
            }
            
        case .custom:
            break
        }
    }
    
    private func timerFinished() {
        stopTimer()
        isTimerFinished = true
        
        let impactFeedback = UIImpactFeedbackGenerator(style: .heavy)
        impactFeedback.impactOccurred()
    }
    
    func startFixingTimer() {
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∏—è
        fixingMinutes = 5
        fixingSeconds = 0
        showFixingTimer = true
    }
    
    func startFixingTimerWithTime(minutes: Int, seconds: Int) {
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞ –¥–ª—è —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∏—è
        timeRemaining = minutes * 60 + seconds
        totalMinutes = minutes
        totalSeconds = minutes * 60 + seconds
        currentMinute = 1
        isTimerFinished = false
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∂–∏–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∏—è
        let fixerMode = AgitationMode.presets.first { $0.name == String(localized: "agitationFixerName") }
        selectedAgitationMode = fixerMode
        setupAgitation()
        
        showFixingTimer = false
    }
    
    // MARK: - Debug Methods
    
    func enableDebugMode() {
        // –í–∫–ª—é—á–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        print("üîß –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ –≤–∫–ª—é—á–µ–Ω")
        print("üìä –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:")
        print("   - –†–µ–∂–∏–º –≤—Å—Ç—Ä—è—Ö–∏–≤–∞–Ω–∏—è: \(selectedAgitationMode?.name ?? "–ù–µ –≤—ã–±—Ä–∞–Ω")")
        print("   - –û–±—â–µ–µ –≤—Ä–µ–º—è: \(totalMinutes) –º–∏–Ω \(totalSeconds % 60) —Å–µ–∫")
        print("   - –¢–µ–∫—É—â–∞—è –º–∏–Ω—É—Ç–∞: \(currentMinute)")
        print("   - –í—Ä–µ–º—è –≤—Å—Ç—Ä—è—Ö–∏–≤–∞–Ω–∏—è: \(agitationTimeRemaining)")
        print("   - –í —Ä–µ–∂–∏–º–µ –≤—Å—Ç—Ä—è—Ö–∏–≤–∞–Ω–∏—è: \(isInAgitationPhase)")
    }
} 
