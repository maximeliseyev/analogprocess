//
//  SwiftDataPersistence.swift
//  AnalogProcess
//
//  Created by Maxim Eliseyev on 11.08.2025.
//

import SwiftData
import SwiftUI

struct SwiftDataPersistence {
    static let shared = SwiftDataPersistence()
    
    @MainActor
    static let preview: SwiftDataPersistence = {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ç–µ—Å—Ç–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        let result = SwiftDataPersistence(inMemory: true)
        let modelContext = result.modelContainer.mainContext
        
        // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–µ–≤—å—é
        let film = SwiftDataFilm()
        film.id = "test-film"
        film.name = "Ilford HP5+"
        film.manufacturer = "Ilford"
        film.type = "Black & White"
        film.defaultISO = 400

        let developer = SwiftDataDeveloper()
        developer.id = "test-developer"
        developer.name = "Kodak D-76"
        developer.manufacturer = "Kodak"
        developer.type = "powder"
        developer.defaultDilution = "1+1"
        
        let developmentTime = SwiftDataDevelopmentTime()
        developmentTime.dilution = "1+1"
        developmentTime.iso = 400
        developmentTime.time = 540
        developmentTime.developer = developer
        developmentTime.film = film
        
        modelContext.insert(film)
        modelContext.insert(developer)
        modelContext.insert(developmentTime)
        
        do {
            try modelContext.save()
        } catch {
            fatalError("Unresolved error \(error)")
        }
        return result
    }()
    
    let modelContainer: ModelContainer

    init(inMemory: Bool = false) {
        print("üöÄ Starting SwiftData initialization (inMemory: \(inMemory))")

        // –ü—ã—Ç–∞–µ–º—Å—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ—Å–Ω–æ–≤–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        do {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
            let (schema, modelConfiguration) = SwiftDataConfigurationManager.createPrimaryConfiguration(inMemory: inMemory)

            // –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Å—Ö–µ–º—É
            let missingEntities = SwiftDataConfigurationManager.validateSchema(schema)
            if !missingEntities.isEmpty {
                print("‚ö†Ô∏è Schema validation warning - missing entities: \(missingEntities)")
            }

            print("üìã Using schema v1.1 with entities: \(SwiftDataSchemas.entityNames(for: schema))")
            print(inMemory ? "üîß Using in-memory configuration" : "‚òÅÔ∏è Attempting CloudKit configuration...")

            self.modelContainer = try ModelContainer(for: schema, configurations: [modelConfiguration])
            return  // –£—Å–ø–µ—à–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        } catch {
            print("SwiftData CloudKit initialization failed: \(error)")

            // –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ—à–∏–±–∫–∏
            if let swiftDataError = error as? SwiftDataError {
                print("SwiftData error details: \(swiftDataError)")
                print("SwiftData error localizedDescription: \(swiftDataError.localizedDescription)")
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏—á–∏–Ω—É –æ—à–∏–±–∫–∏ CloudKit
            if let nsError = error as NSError? {
                print("Error domain: \(nsError.domain)")
                print("Error code: \(nsError.code)")
                print("Error userInfo: \(nsError.userInfo)")
                if nsError.code == 134400 {
                    print("‚ö†Ô∏è CloudKit —Ç—Ä–µ–±—É–µ—Ç iCloud –∞–∫–∫–∞—É–Ω—Ç. –í–æ–π–¥–∏—Ç–µ –≤ iCloud –≤ –ù–∞—Å—Ç—Ä–æ–π–∫–∞—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞.")
                }
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–≤—è–∑–∞–Ω–∞ –ª–∏ –æ—à–∏–±–∫–∞ —Å –º–æ–¥–µ–ª—è–º–∏
            print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ö–µ–º—ã –ø–µ—Ä–µ–¥ fallback:")
            let currentSchema = SwiftDataSchemas.current
            for entity in currentSchema.entities {
                print("   - Entity: \(entity.name)")
            }

            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–π fallback –ø–æ–¥—Ö–æ–¥
            let recoveryStrategies: [SwiftDataRecoveryStrategy] = [
                .resetDatabase,  // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º —Å–±—Ä–æ—Å–∏—Ç—å –±–∞–∑—É —Å –ø–æ–ª–Ω–æ–π —Å—Ö–µ–º–æ–π
                .useMemory,      // –ó–∞—Ç–µ–º in-memory —Å –ø–æ–ª–Ω–æ–π —Å—Ö–µ–º–æ–π
                .useMinimalSchema, // –ü–æ—Ç–æ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ö–µ–º–∞
                .useJournalOnly    // –ò –Ω–∞–∫–æ–Ω–µ—Ü —Ç–æ–ª—å–∫–æ –∂—É—Ä–Ω–∞–ª
            ]

            for strategy in recoveryStrategies {
                print("‚ö†Ô∏è Attempting recovery strategy: \(strategy.description)")

                do {
                    // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è resetDatabase
                    if strategy == .resetDatabase {
                        let url = URL.applicationSupportDirectory.appending(path: "default.store")
                        if FileManager.default.fileExists(atPath: url.path()) {
                            try FileManager.default.removeItem(at: url)
                            print("üóëÔ∏è Removed corrupted database")
                        }
                    }

                    let (schema, configuration) = SwiftDataConfigurationManager.createFallbackConfiguration(strategy: strategy)
                    let container = try ModelContainer(for: schema, configurations: [configuration])

                    print("‚úÖ Recovery successful using \(strategy.description)")
                    print("üìã Using entities: \(SwiftDataSchemas.entityNames(for: schema))")

                    self.modelContainer = container
                    return  // –£—Å–ø–µ—à–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ

                } catch {
                    print("‚ùå Recovery strategy '\(strategy.description)' failed: \(error)")
                    continue
                }
            }

        // –ï—Å–ª–∏ –≤—Å–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å, —Å–æ–∑–¥–∞—ë–º –∞–≤–∞—Ä–∏–π–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        print("üí• All recovery strategies failed - using emergency configuration")
        let (emergencySchema, emergencyConfig) = SwiftDataConfigurationManager.createFallbackConfiguration(strategy: .useMemory)
        do {
            self.modelContainer = try ModelContainer(for: emergencySchema, configurations: [emergencyConfig])
            print("üÜò Emergency in-memory configuration successful")
        } catch {
            // –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—Ö–µ–º–æ–π
            let minimalSchema = Schema([SwiftDataJournalRecord.self])
            let minimalConfig = ModelConfiguration(schema: minimalSchema, isStoredInMemoryOnly: true)
            self.modelContainer = try! ModelContainer(for: minimalSchema, configurations: [minimalConfig])
            print("üÜòüÜò Ultra-minimal emergency configuration - journal only")
        }
        }
    }
}
